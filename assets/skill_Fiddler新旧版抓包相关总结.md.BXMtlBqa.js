import{_ as r,c as t,a1 as o,o as a}from"./chunks/framework.BDxlaA_J.js";const h=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"skill/Fiddler新旧版抓包相关总结.md","filePath":"skill/Fiddler新旧版抓包相关总结.md","lastUpdated":1729909366000}'),n={name:"skill/Fiddler新旧版抓包相关总结.md"};function s(g,e,i,d,l,c){return a(),t("div",null,e[0]||(e[0]=[o('<p><img src="https://img-blog.csdnimg.cn/20201119191919608.jpg" alt="在这里插入图片描述"></p><p><code>申明：本来这篇博客是综合我个人在使用fiddler的过程中的一些使用技巧和问题解决方案，一开始是打算同步更新新版和旧版，但是后来我发现，其实原理和方法都是差不多的，所以后续更新主要以最新版的Fiddler Everywhere为主。</code></p><p><code>目前已更新：新版 Fiddler Everywhere解决App抓包无网络。后续会持续更新~~</code></p><h2 id="导入" tabindex="-1">导入 <a class="header-anchor" href="#导入" aria-label="Permalink to &quot;导入&quot;">​</a></h2><p>之前在研究爬虫时发现，有些网站并不能通过浏览器的后台抓取，所以我又开始演技抓包工具 <strong>Fiddler</strong> ，到目前为止也查过不少的坑，所以我准备将这些内容总结一下供大家查阅，同时若有不对的地方也请各位大佬不吝赐教~</p><hr><h3 id="软件安装" tabindex="-1">软件安装 <a class="header-anchor" href="#软件安装" aria-label="Permalink to &quot;软件安装&quot;">​</a></h3><h4 id="旧版-fiddler4" tabindex="-1">旧版 Fiddler4 <a class="header-anchor" href="#旧版-fiddler4" aria-label="Permalink to &quot;旧版 Fiddler4&quot;">​</a></h4><p>对于新旧版本的 <strong>Fiddler</strong> 可以直接去官网下载，速度也还可以，所以这里就不提供下载链接了，详情见 <strong><a href="https://www.telerik.com/fiddler" target="_blank" rel="noreferrer">官网直达</a></strong>。</p><blockquote><p><strong>不过这里有一点要注意：</strong></p><p>如果想要下载旧版的 <strong>Fiddler</strong> 则需要 点击：<strong>Download Now</strong> 下面的 <strong>Looking for Fiddler Classic? <a href="https://www.telerik.com/download/fiddler" target="_blank" rel="noreferrer">Download it here</a></strong> ，否则直接下载的就是最新版的 <strong>Fiddler Everywhere</strong> 。</p></blockquote><p><img src="https://img-blog.csdnimg.cn/20210106180212559.png" alt="在这里插入图片描述"></p><h4 id="新版-fiddler-everywhere" tabindex="-1">新版 Fiddler Everywhere <a class="header-anchor" href="#新版-fiddler-everywhere" aria-label="Permalink to &quot;新版 Fiddler Everywhere&quot;">​</a></h4><p>相对于旧版，新版的 <strong>Fiddler</strong> 的界面变得更简洁，相应的，去掉了一些不太常用的功能按钮：</p><p>不过缺点是，<strong>Fiddler Everywhere</strong>在打开后<strong>必须登录</strong>才可以使用，好在我有谷歌账户，可以直接登录。<img src="https://img-blog.csdnimg.cn/img_convert/3550582a4430b03522497ed427bd005a.png" alt=""></p><hr><h3 id="证书配置" tabindex="-1">证书配置 <a class="header-anchor" href="#证书配置" aria-label="Permalink to &quot;证书配置&quot;">​</a></h3><h4 id="旧版-fiddler4-1" tabindex="-1">旧版 Fiddler4 <a class="header-anchor" href="#旧版-fiddler4-1" aria-label="Permalink to &quot;旧版 Fiddler4&quot;">​</a></h4><p>对于旧版的 <strong>Fiddler</strong> ，我们下载并安装好后就可以配置证书于设置了： <img src="https://img-blog.csdnimg.cn/img_convert/3f2c19fcd50e7186a4459df63ff4528b.png" alt="img-LByU3way-1605780378079"></p><p>找到菜单栏中的 <strong>Tools</strong> ，点击 <strong>Options</strong> 进入后找到 <strong>HTTPS</strong> 选项： <img src="https://img-blog.csdnimg.cn/img_convert/cb90206a70de4931348aec7de5603234.png" alt=""> 并且对于简单的抓包需求，我们还可以设置 <strong>Rules</strong>:<img src="https://img-blog.csdnimg.cn/img_convert/65417a00fbee387013096a9d9535e603.png" alt=""></p><p>到此，基本的配置就已经完成，可以尝试以下抓包了：</p><p>我们对 <strong><a href="https://cn.bing.com/" target="_blank" rel="noreferrer">必应主页</a></strong> 进行抓取可以看到以下的页面：<img src="https://img-blog.csdnimg.cn/img_convert/62c7c18ffa150b3705474789cf4a9852.png" alt=""></p><blockquote><p>这里有一点需要<strong>注意</strong>： 如果你的浏览器含有一些有网络代理功能的插件或者其它的代理工具，需要将它们<strong>全部都关闭掉</strong>，不然的话会抓取不到任何的数据。 其实原因的话理解起来很简单：<strong>Fiddler</strong> 扮演的是一个中间商，无论什么数据请求都需要它来进行代理，都要通过它，然后它才能把这些数据都显示出来，如果你使用了第三方的代理服务的话，它就根本不知道你到底进行了怎么样的数据交换。</p></blockquote><p>可以看到我们已经抓取了 <strong><a href="https://cn.bing.com/" target="_blank" rel="noreferrer">必应主页</a></strong> 的所有的数据信息。</p><h4 id="新版-fiddler-everywhere-1" tabindex="-1">新版 Fiddler Everywhere <a class="header-anchor" href="#新版-fiddler-everywhere-1" aria-label="Permalink to &quot;新版 Fiddler Everywhere&quot;">​</a></h4><p>打开软件后进入主界面，可以直接点击右上角的设置按钮进行证书安装： <img src="https://img-blog.csdnimg.cn/20201119183542667.png" alt="在这里插入图片描述"> 因为最新版的 <strong>Fidler</strong> 默认关闭抓取： <img src="https://img-blog.csdnimg.cn/20201119183824587.png" alt="在这里插入图片描述"> 所以我们准备好后可以直接开启抓取信息，我们依旧用 <strong><a href="https://cn.bing.com/" target="_blank" rel="noreferrer">必应主页</a></strong> 来进行演示： <img src="https://img-blog.csdnimg.cn/20201119184052420.png" alt="在这里插入图片描述"> 我们先清空所有的抓包信息，接着刷新浏览器，可以看到有很多的信息都被抓取了下来。但是有用的却不多，所以我们还可以简单的配置一下过滤器： <img src="https://img-blog.csdnimg.cn/20201119184449392.png" alt="在这里插入图片描述"> 然后重新清空所有的已抓取信息，刷新浏览器就和我上面的图差不多了。</p><hr><h3 id="修改服务器返回数据" tabindex="-1">修改服务器返回数据 <a class="header-anchor" href="#修改服务器返回数据" aria-label="Permalink to &quot;修改服务器返回数据&quot;">​</a></h3><h4 id="旧版-fiddler4-2" tabindex="-1">旧版 Fiddler4 <a class="header-anchor" href="#旧版-fiddler4-2" aria-label="Permalink to &quot;旧版 Fiddler4&quot;">​</a></h4><p>我们依旧用 <strong><a href="https://cn.bing.com/" target="_blank" rel="noreferrer">必应主页</a></strong> 来进行演示： <img src="https://img-blog.csdnimg.cn/img_convert/5ccabea5279ff4659d59a6fc82ba50f6.png" alt=""> 我们先清空所有的抓包信息，接着刷新浏览器，可以发现<strong>必应主页</strong>的图标是通过一个链接去请求的，那么我们是否可以换掉这个返回数据呢？</p><blockquote><p>在这里，我找了一个<strong>百度云盘</strong>的图片链接： <a href="https://img-blog.csdnimg.cn/img_convert/50473dad2c459cc5ada43f40d5a4d3bb.png" target="_blank" rel="noreferrer">https://dss0.bdstatic.com/5aV1bjqh_Q23odCf/static/superman/img/topnav/baiduyun@2x-e0be79e69e.png</a> &gt; <img src="https://img-blog.csdnimg.cn/img_convert/50473dad2c459cc5ada43f40d5a4d3bb.png" alt=""></p></blockquote><p>我们将需要修改的请求拖动到 <strong>AutoResponder</strong> 中： <img src="https://img-blog.csdnimg.cn/img_convert/aa2b0e44a91d0a6ab7d89fb971537239.png" alt=""> 根据返回类型的样式选择对应的规则：<img src="https://img-blog.csdnimg.cn/img_convert/032965996ab95506d8804f8db054ff94.png" alt=""></p><p>这里只是需要将图片重定向，所以我们选择的规则是<code>*redir:http://www.example.com</code> 或者 <code>http://www.example.com</code> ，我们只需要将链接更换为我们需要重定向的链接，然后点击 <strong>save</strong> 保存：<img src="https://img-blog.csdnimg.cn/img_convert/a1870a8ff43ed8ca4e0988084427918f.png" alt=""></p><p>到现在，我们已经编写好了修改数据库返回数据的规则，现在只需要开启规则就可以了：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/2fcce2e7a7328bfede46428142a1c30f.png" alt=""></p><p>接着刷新一下浏览器，就会看到以下的这种效果：<img src="https://img-blog.csdnimg.cn/img_convert/7f90ec112504f21b7cf53e1269b16f97.png" alt=""></p><blockquote><p><strong>备注:</strong></p><ul><li>1、<strong>Enable rules</strong>（激活规则）：勾选此选项，自动响应才会激活。</li><li>2、<strong>Unmatched requests passthrough</strong>（跳过非匹配请求）：如果不勾选此选项,那么抓包的时候,会返回<code>[Fiddler] The Fiddler AutoResponder is enabled, but this request did not match any of the listed rules. Because the &quot;Unmatched requests passthrough&quot; option on the AutoResponder tab is not enabled, this HTTP/404 response has been generated.</code> 这句话的意思是，<strong>Fiddler</strong>的自动响应激活了，但是请求没匹配到任何列表中的规则。而且因为跳过非匹配请求选项没有激活，所以产生了<strong>HTTP/404</strong>返回结果。</li><li>3、<strong>Enable latency</strong>（激活延迟）：勾选了这个选项,在规则里面就可以设置是立即返回响应，还是隔多少毫秒返回响应 ，</li></ul></blockquote><h4 id="新版-fiddler-everywhere-2" tabindex="-1">新版 Fiddler Everywhere <a class="header-anchor" href="#新版-fiddler-everywhere-2" aria-label="Permalink to &quot;新版 Fiddler Everywhere&quot;">​</a></h4><blockquote><p>在这里，我依然用<strong>百度云盘</strong>的图片链接来做演示： <a href="https://img-blog.csdnimg.cn/img_convert/50473dad2c459cc5ada43f40d5a4d3bb.png" target="_blank" rel="noreferrer">https://dss0.bdstatic.com/5aV1bjqh_Q23odCf/static/superman/img/topnav/baiduyun@2x-e0be79e69e.png</a> &gt; <img src="https://img-blog.csdnimg.cn/img_convert/50473dad2c459cc5ada43f40d5a4d3bb.png" alt=""></p></blockquote><p>右击需要修改的请求，选择 <code>Add New Rule</code> ，可以跳转到规则详情页： <img src="https://img-blog.csdnimg.cn/20201119185146260.png" alt="在这里插入图片描述"> 然后点击编辑，更改返回的数据： <img src="https://img-blog.csdnimg.cn/20201119185814720.png" alt="在这里插入图片描述"> 因为我们只需要将请求连接重定向，所以选择<code>*redir:http://www.example.com</code> 或者 <code>http://www.example.com</code> 都可以。之前旧版的选择了第一种，那么这里就选用第二种吧： 将重定向的连接填写好后点击 <strong>save</strong> 保存： <img src="https://img-blog.csdnimg.cn/20201119190148264.png" alt="在这里插入图片描述"> 到此，我们也编写完了替换规则，接下来就是开启抓包并打开 <strong>Auto Responder</strong> ，点击刷新浏览器后可以看到： <img src="https://img-blog.csdnimg.cn/20201119190504960.png" alt="在这里插入图片描述"></p><hr><h3 id="app-抓包无网络" tabindex="-1">APP 抓包无网络 <a class="header-anchor" href="#app-抓包无网络" aria-label="Permalink to &quot;APP 抓包无网络&quot;">​</a></h3><h4 id="问题引入" tabindex="-1">问题引入 <a class="header-anchor" href="#问题引入" aria-label="Permalink to &quot;问题引入&quot;">​</a></h4><p><code>问题描述：fiddler证书已经配置好，网页抓包没问题，大部分App抓包没问题，某一个App显示无网络连接。</code><img src="https://img-blog.csdnimg.cn/20210111180210951.png" alt="在这里插入图片描述"></p><p>对于这种情况，首先要知道为什么会出现这种情况？ <strong>答案就是：客户端对 SSL 证书进行了检测。</strong></p><p>这时候就要使用<strong>Xposed 框架</strong>和<strong>JustTrustMe</strong>来绕过解决这个问题。</p><blockquote><ul><li><strong>Xposed 模块</strong>：Xposed 框架(Xposed Framework)是一套开源的、在 Android 高权限模式下运行的框架服务，可以在不修改 APK 文件的情况下影响程序运行(修改系统)的框架服务，基于它可以制作出许多功能强大的模块，且在功能不冲突的情况下同时运作。【<a href="https://baike.baidu.com/item/Xposed%E6%A1%86%E6%9E%B6/16859077" target="_blank" rel="noreferrer">Xposed 框架---百度百科</a>】【<a href="https://repo.xposed.info/" target="_blank" rel="noreferrer">Xposed Module Repository</a>】 <img src="https://img-blog.csdnimg.cn/20210106183958397.jpg" alt="在这里插入图片描述"></li><li><strong>JustTrustMe</strong>：一个 xposed 模块，用于禁用 SSL 证书检查。JustTrustMe 是将 <strong>APP</strong> 中所有用于校验 SSL 证书的 API 都进行了 <strong>Hook</strong>，从而绕过证书检查。【<a href="https://github.com/Fuzion24/JustTrustMe" target="_blank" rel="noreferrer">JustTrustMe---GitHub</a>】</li></ul></blockquote><h4 id="下载并安装配件" tabindex="-1">下载并安装配件 <a class="header-anchor" href="#下载并安装配件" aria-label="Permalink to &quot;下载并安装配件&quot;">​</a></h4><h5 id="插件环境准备" tabindex="-1">插件环境准备 <a class="header-anchor" href="#插件环境准备" aria-label="Permalink to &quot;插件环境准备&quot;">​</a></h5><p>一开始，我是在我的旧手机上安装这一系列的插件时，因为 Android 的版本有点高，适配不了当前版本的框架，所以我干脆下了个夜神模拟器（Android 5）来进行安装，结果是可行的，至于模拟器的安装与配置，在这里就不再细说了。</p><h5 id="下载安装-xposted-框架" tabindex="-1">下载安装 Xposted 框架 <a class="header-anchor" href="#下载安装-xposted-框架" aria-label="Permalink to &quot;下载安装 Xposted 框架&quot;">​</a></h5><p>首先进入 <strong><a href="https://repo.xposed.info/" target="_blank" rel="noreferrer">Xposed Module Repository</a></strong> 的页面，接着按照下图顺序点击并下载最新版的 <strong>Xposed Installer</strong>： <img src="https://img-blog.csdnimg.cn/20210111165334761.png" alt="在这里插入图片描述"> 打开模拟器后，直接双击刚刚下载的安装包就可以安装，安装完成后打开应用进行配置： <img src="https://img-blog.csdnimg.cn/20210111170447379.png" alt="在这里插入图片描述"> 打开软件以后，点击 <strong>Version 89</strong> ，然后点击 <strong>Install</strong>: <img src="https://img-blog.csdnimg.cn/20210111170850109.png" alt="在这里插入图片描述"></p><blockquote><p>在安装的过程中会提示授权 root 权限，点击授权就好。</p></blockquote><p>当出现最后一张图的画面时，就说明已经安装成功了，重启模拟器后打开软件： <img src="https://img-blog.csdnimg.cn/20210111171121391.png" alt="在这里插入图片描述"></p><h5 id="下载安装-justtrustme-模块" tabindex="-1">下载安装 JustTrustMe 模块 <a class="header-anchor" href="#下载安装-justtrustme-模块" aria-label="Permalink to &quot;下载安装 JustTrustMe 模块&quot;">​</a></h5><p>首先，先打开 <a href="https://github.com/Fuzion24/JustTrustMe/releases/tag/v.2" target="_blank" rel="noreferrer">JustTrustMe</a> 网页： <img src="https://img-blog.csdnimg.cn/2021011117144528.png" alt="在这里插入图片描述"> 找到<strong>apk</strong>文件，点击下载，完成后双击安装。 现在，我们所需要的东西已经全部都准备好了，接下来就开始启用模块： <img src="https://img-blog.csdnimg.cn/20210111171846718.png" alt="在这里插入图片描述"> 启用模块后，配置好模拟器的代理后，就可以抓包了： <img src="https://img-blog.csdnimg.cn/20210111174527485.png" alt="标题"></p>',55)]))}const m=r(n,[["render",s]]);export{h as __pageData,m as default};
